# server {
#     listen 80;
#     server_name localhost; # Или ваш домен
#
#     # Корневая директория (можно не указывать, если все через прокси)
#     # root /var/www/frontend; # Nginx сам не будет искать index.html Next.js
#
#     # Логи
#     access_log /var/log/nginx/access.log;
#     error_log /var/log/nginx/error.log;
#
#     # Обработка API запросов (/api/) - проксируем на PHP-FPM
#     location /api {
#         try_files $uri =404; # Если файл существует (маловероятно для API), отдать его, иначе - прокси
#         fastcgi_split_path_info ^(.+\.php)(/.+)$;
#         include fastcgi_params;
#         fastcgi_param SCRIPT_FILENAME /var/www/html/public/index.php; # Путь к точке входа PHP внутри контейнера backend
#         fastcgi_param PATH_INFO $fastcgi_path_info;
#         fastcgi_param SCRIPT_NAME /index.php; # Говорим PHP, что скрипт - index.php
#         fastcgi_index index.php;
#         fastcgi_pass backend:9000; # 'backend' - имя сервиса PHP-FPM, 9000 - его порт
#     }
#
#     # Обработка статики Next.js (_next/static и public)
#     # Nginx отдает ее эффективнее, чем Node.js сервер
#     location /_next/static {
#         alias /var/www/frontend/_next/static;
#         expires 1y; # Длительное кеширование для статики с хешами
#         access_log off;
#     }
#
#     location /public {
#          alias /var/www/frontend/public;
#          expires 1d; # Кеширование для другой статики
#          access_log off;
#     }
#
#
#     # Все остальные запросы проксируем на Next.js приложение
#     location / {
#         proxy_pass http://frontend:3000; # 'frontend' - имя сервиса Next.js, 3000 - его порт
#         proxy_http_version 1.1;
#         proxy_set_header Upgrade $http_upgrade;
#         proxy_set_header Connection 'upgrade';
#         proxy_set_header Host $host;
#         proxy_cache_bypass $http_upgrade;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme;
#     }
#
#     # Запрет доступа к скрытым файлам
#     location ~ /\. {
#         deny all;
#     }
# }
#
#
#
#
#
#
#
#
server {
    listen 80;
    server_name localhost; # Или ваш домен

    # Логи
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # --- ПРЯМОЙ ДОСТУП К СКРИПТУ ГЕНЕРАЦИИ БД ---
    # ВАЖНО: Этот эндпоинт очень опасен для продакшена!
    # Он полностью очищает и перезаполняет базу данных.
    # Используйте только для разработки/тестирования.
    # Для продакшена этот location блок СЛЕДУЕТ УДАЛИТЬ или защитить (например, по IP).
    location = /db-generate.php {
#         try_files $uri =404; # На случай, если файл вдруг не найден
        include fastcgi_params;

        # Указываем путь к конкретному скрипту внутри PHP контейнера
        fastcgi_param SCRIPT_FILENAME /var/www/html/public/db-generate.php;
        # Имя скрипта, которое увидит PHP
        fastcgi_param SCRIPT_NAME /db-generate.php;
        # fastcgi_param PATH_INFO $fastcgi_path_info; # Обычно не нужен для прямого вызова скрипта
        # fastcgi_index index.php; # Не нужен здесь

        # Передаем запрос на PHP-FPM сервис 'backend' на порт 9000
        fastcgi_pass backend:9000;

        # Опционально: Увеличить таймауты для длительной операции сидинга
        # fastcgi_read_timeout 300s;
        # fastcgi_send_timeout 300s;
    }

    # Обработка API запросов (/api/) - проксируем на главный index.php
    location /api {
#         try_files $uri =404; # Если есть статический файл с таким именем в /api (маловероятно), отдать его
        fastcgi_split_path_info ^(/api)(/.*)$; # Разделяем /api и остальной путь
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME /var/www/html/public/index.php; # Основная точка входа API
        # Передаем оригинальный URI без /api/, чтобы роутер в index.php мог работать с /airports, /flights и т.д.
        fastcgi_param REQUEST_URI $fastcgi_path_info;
        # Или можно настроить SCRIPT_NAME/PATH_INFO, если роутер PHP их использует
        # fastcgi_param SCRIPT_NAME /index.php;
        # fastcgi_param PATH_INFO $fastcgi_path_info;
        fastcgi_index index.php;
        fastcgi_pass backend:9000; # 'backend' - имя сервиса PHP-FPM
    }

    # Обработка статики Next.js (_next/static и public)
    # Nginx отдает ее эффективнее, чем Node.js сервер
    location /_next/static {
        alias /var/www/frontend/_next/static; # Путь внутри Nginx контейнера, куда монтируется статика
        expires 1y; # Длительное кеширование для статики с хешами
        access_log off;
    }

    location /public {
         alias /var/www/frontend/public; # Путь внутри Nginx контейнера
         expires 1d; # Кеширование для другой статики
         access_log off;
    }


    # Все остальные запросы проксируем на Next.js приложение
    location / {
        proxy_pass http://frontend:3000; # 'frontend' - имя сервиса Next.js
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
         # Опционально: Увеличить таймауты, если Next.js может долго отвечать
        # proxy_connect_timeout 60s;
        # proxy_send_timeout 60s;
        # proxy_read_timeout 60s;
    }

    # Запрет доступа к скрытым файлам
    location ~ /\. {
        deny all;
    }
}